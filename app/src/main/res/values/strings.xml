<resources>
    <!-- usual stuff -->
    <string name="app_name">DragAndQuery</string>
    <string name="splash_title">Drag and Query</string>
    <string name="title_activity_dashboard">Dashboard</string>
    <string name="navigation_drawer_open">Open navigation drawer</string>
    <string name="navigation_drawer_close">Close navigation drawer</string>
    <string name="nav_header_title">Drag And Query</string>
    <string name="nav_header_subtitle">Im Auftrag der JGU</string>
    <string name="nav_header_desc">Navigation header</string>
    <string name="action_settings">Settings</string>

    <!-- nd + settings -->
    <string name="menu_home">Home</string>
    <string name="menu_free">Freier Modus</string>
    <string name="menu_tutorial">Tutorial</string>
    <string name="menu_practice">Übungen</string>
    <string name="menu_dbView">Datenbank</string>
    <string name="menu_settings">Einstellungen</string>
    <string name="menu_impressum">Impressum</string>
    <string name="title_activity_navigation">Navigation</string>
    <string name="others">Sonstiges</string>
    <string name="welcome">Ändere dein Profilbild</string>
    <string name="global_reset">Tutorial und Übungen zurücksetzen</string>
    <string name="start_btn_go">Go!</string>
    <string name="loginName_hint">Name</string>
    <string name="loginMail_hint">Mail</string>
    <string name="save">Speichern</string>

    <!-- practice -->
    <string name="prac_easy">Leicht</string>
    <string name="prac_medium">Mittel</string>
    <string name="prac_hard">Schwer</string>

    <string name="title_activity_practice">Schwierigkeitsgrad</string>
    <string name="title_activity_practices">Übungen</string>
    <string name="title_prac_easy">Leichte Übungen</string>
    <string name="title_prac_medium">Mittelschwere Übungen</string>
    <string name="title_prac_hard">Schwere Übungen</string>

    <string name="ex_title">Aufgabe</string>

    <string name="ex_easy_1">Übung 1</string>
    <string name="ex_easy_1_text">Für die Mitarbeiter im Büro soll eine Kontaktliste erstellt werden. \n\n
        Lasse dir dafür den Firmennamen, die Kontaktperson und die Telefonnummer der Lieferanten ausgeben</string>
    <string name="ex_easy_2">Übung 2</string>
    <string name="ex_easy_2_text">In der Cafeteria gibt es auch vegetarische und vegane Hauptgerichte.
        Diese gehören zur Kategorie Nummer 5.\n\n
        Lasse dir 15 dieser Gerichte ausgeben.</string>
    <string name="ex_easy_3">Übung 3</string>
    <string name="ex_easy_3_text">Wie viele Hauptgerichte (Kategorien 3, 4 und 5) gibt es insgesamt in der Cafeteria? </string>
    <string name="ex_easy_4">Übung 4</string>
    <string name="ex_easy_4_text">Welche Angestellten wohnen in Wiesbaden? \n\n
        Lasse dir die Vor-und Nachnamen ausgeben.</string>
    <string name="ex_easy_5">Übung 5</string>
    <string name="ex_easy_5_text">Wie viele Artikel enthält jede Bestellung im Durchschnitt? </string>
    <string name="ex_easy_6">Übung 6</string>
    <string name="ex_easy_6_text">Wie viele Kunden hat die Cafeteria?</string>
    <string name="ex_easy_7">Übung 7</string>
    <string name="ex_easy_7_text">Gesunde Ernährung ist wichtig, deshalb gibt es nicht nur Hauptgerichte, sondern auch Beilagen und Salate.
        Aber natürlich darf an einem anstrengenden Schultag auch ein leckerer Nachtisch nicht fehlen.\n\n
        Lasse dir die Namen und Beschreibungen der Kategorien ausgeben, die keine Hauptgerichte (3, 4, 5) sind. </string>
    <string name="ex_easy_8">Übung 8</string>
    <string name="ex_easy_8_text">Die Chefköchin erstellt den Speiseplan für die kommende Woche.
        Sie muss dazu wissen, wieviel Kartoffelsalat(ArtikelNr 117) und wieviel Nudelsalat (ArtikelNr 119) noch im Lager ist,
        da es einen Grilltag geben soll. \n\n
        Lasse dir also den Lagerbestand für die beiden Artikel, sowie die LieferantenNr und die Liefereinheit ausgeben. </string>
    <string name="ex_easy_9">Übung 9</string>
    <string name="ex_easy_9_text">Frau Blum vom Kartoffelhof hat angekündigt, dass sich die nächste Lieferung verspäten wird.
        Um den Speiseplan entsprechend anzupassen, wird eine Liste aller Artikel mit Name, Nummer und Lagerbestand benötigt,
        welche vom Kartoffelhof (LiefernatenNr 1) kommen. \n\n
        Gib diese aus.</string>
    <string name="ex_easy_10">Übung 10</string>
    <string name="ex_easy_10_text">Die neue Bürokraft will einen Geburtstagskalender für das Personal erstellen.
        Sie benötigt dafür eine Liste mit Vor-und Zunamen aller Angestellten, sowie deren Geburtstag. \n\n
        Gib diese aus.</string>
    <string name="ex_medium_1">Übung 1</string>
    <string name="ex_medium_1_text">Wie viele Bestellungen haben mehr als 4€ gekostet?</string>
    <string name="ex_medium_2">Übung 2</string>
    <string name="ex_medium_2_text">Lasse dir die Nach-und Vornamen aller Angestellten aus Mainz in
        alphabetischer Reihenfolge absteigend nach dem Nachnamen sortiert anzeigen. </string>
    <string name="ex_medium_3">Übung 3</string>
    <string name="ex_medium_3_text">Was hat die teuerste Bestellung gekostet und welche war es (Bestellnr)?</string>
    <string name="ex_medium_4">Übung 4</string>
    <string name="ex_medium_4_text">Was ist wohl beliebter: Spaghetti Bolognese (ArtikelNr 62) oder
        Spaghetti mit Gemüsebolognese (ArtikelNr88)? \n\n
        Lasse dir ausgeben, wieviele Bestellungen mit Bolognese und wieviele mit Gemüsebolognesees es gab.</string>
    <string name="ex_medium_5">Übung 5</string>
    <string name="ex_medium_5_text">Das Team für Qualitätsmanagement will das Speisenangebot der Cafeteria überprüfen.
        Dazu benötigen sie unter anderem eine Liste der verschiedenen Speisekategorien, sowie die Information,
        wie groß das Angebot in jeder Kategorie ist. \n\n
        Lasse dir also zu jeder Kategorie den Kategorienamen und die Anzahl Artikel der Kategorie anzeigen</string>
    <string name="ex_medium_6">Übung 6</string>
    <string name="ex_medium_6_text">Lilli will sich von ihrem Mensageld heute Nachmittag noch ein Eis gönnen.
        Deshalb möchte sie heute Mittag möglichst günstig essen. \n\n
        Findefür sie heraus, bei welcher Kategorie der Durchschnittspreis der Artikel günstiger als 1€ ist.</string>
    <string name="ex_medium_7">Übung 7</string>
    <string name="ex_medium_7_text">Es muss festgestellt werden, wie abhängig die Cafeteria von einzelnen Lieferanten ist.
        Finde dazu heraus, von welchen Lieferanten mehr als 1500 Artikel bei uns im Lager vorrätig sind. \n\n
        Gib dazu sowohl die Summe der Lagerbestände als auch die jeweilige Lieferantennummer aus.(\n\n
        <i>Tipp: Group by und having verwenden)</i></string>
    <string name="ex_medium_8">Übung 8</string>
    <string name="ex_medium_8_text">Um herauszufinden, wie viele Angestellte nicht im Büro arbeiten, zähle einfach die
        Personalnummern, die schon einmal eine Bestellung bearbeitet haben.\n\n
        Kannst du das? </string>
    <string name="ex_medium_9">Übung 9</string>
    <string name="ex_medium_9_text">Die Leitung der Cafeteria will versuchen einen Sonderrabatt mit der Metro (LieferantenNr2) auszuhandeln. \n\n
        Dazu möchte sie wissen, wie viele Artikel der Metro im Schnitt in jeder Bestellung sind. </string>
    <string name="ex_hard_1">Übung 1</string>
    <string name="ex_hard_1_text">Die Leitung der Cafeteria überlegt diese freitags zu schließen. Vorher soll eine Übersicht generiert werden, in der die Anzahl Bestellungen pro Tag im Februar 2018 abgebildet sind.\n\n
        <i>Tipp: Arbeite mit dem LIKE-Baustein, um alle Tage aus dem Februar 2018 selektieren zu können.</i></string>
    <string name="ex_hard_2">Übung 2</string>
    <string name="ex_hard_2_text">Die Cafeteria will Fahrgemeinschaften unter den Angestellten fördern.
        Es wird davon ausgegangen, dass nur Personal zusammenfährt, dass im selben Postleitzahlbereich wohnt. \n\n
        Wie viele Leute würden aus welchem Postleitzahlbereich zusammenfahren?</string>
    <string name="ex_hard_3">Übung 3</string>
    <string name="ex_hard_3_text">Peters Mutter glaubt ihm nicht, dass er mehr Geld für die Cafeteria braucht.
        Sie weiß seine KontoID (17) und fragt nun in der Mensa nach, für wieviel Geld er bisher gegessen hat. \n\n
        Findest du es heraus? .</string>
    <string name="ex_hard_4">Übung 4</string>
    <string name="ex_hard_4_text">Frau Schmid (PersonalNr 5) beschwert sich darüber, dass in jeder Bestellung,
        die sie bearbeitet Fleisch enthalten ist, obwohl sie streng vegan lebt. \n\n
        Wie viele Bestellungen mit Fleisch hat Frau Müller bearbeitet?</string>
    <string name="ex_hard_5">Übung 5</string>
    <string name="ex_hard_5_text">Der Elternbeirat will eine Gemüsepflicht für die Mahlzeiten in der Cafeteria fordern.
        So soll jede Bestellung mindestens eine Gemüsebeilage (KategorieNr 2) enthalten.
        Die Schulleitung ist dagegen und möchte nun wissen, wie viele Bestellungen <b>ohne</b> Gemüsebeilage es gab. \n\n
        <i>(Denk an den Distinct-Operator.)</i></string>
    <string name="ex_hard_6">Übung 6</string>
    <string name="ex_hard_6_text">Die Leitung der Cafeteria möchte wissen, wie viele Bestellungen jeder Nutzer getätigt hat. \n\n
        Gib dazu die KontoID und die Anzahl Bestellungen aus.</string>
    <string name="ex_hard_7">Übung 7</string>
    <string name="ex_hard_7_text">Das Team für Qualitätsmanagement will auch die Portionsgröße prüfen. Hierzu soll gezählt werden, bei wie vielen Bestellungen eine Gemüse-oder Sättigungsbeilage mehrfach gekauft wurde (KategorieNr 1, 2).</string>
    <string name="ex_hard_8">Übung 8</string>
    <string name="ex_hard_8_text">Die Personalleitung möchte wissen, welche Personen als Mitarbeiter*in
        des Monats Februar 2018 in Frage kommt. Es sollen alle Mitarbeiter*innen gefunden werden, die mehr als 5
        Bestellungen im Februar bearbeitet haben. \n\n
        Der Personalleitung reichen die jeweiligen PersonalIDs.</string>


    <!-- tutorial -->
    <string name="feedback_back">Zurück</string>
    <string name="feedback_forth">Weiter</string>
    <string name="accept_input">Verstanden!</string>

    <string name="head_tutorial">Tutorial</string>
    <string name="tutorial_category1">Relationale Datanbanken</string>
    <string name="tutorial_category2">Bedingungen</string>
    <string name="tutorial_category3">Aggregatfunktionen</string>
    <string name="tutorial_category4">Join</string>

    <string name="title_activity_tutorial_category">Tutorial Category</string>
    <string name="title_activity_tutorial">Tutorial</string>

    <string name="cat1_lec1">Intro</string>
    <string name="cat1_lec2">Einsatzmöglichkeiten für Datenbanken </string>
    <string name="cat1_lec3">Von Datenbanken und Tabellen</string>
    <string name="cat1_lec4">Warum relational? </string>
    <string name="cat1_lec5">Zeilen, Spalten, Attribute </string>
    <string name="cat1_lec6">Anforderungen an Tabellen </string>
    <string name="cat1_lec7">Datentypen von Attributen</string>
    <string name="cat1_lec8">Eindeutigkeit dank Schlüsseln </string>
    <string name="cat1_lec9">Fremdschlüssel</string>
    <string name="cat1_lec10">Kardinalitäten</string>
    <string name="cat1_lec11">Die erste Datenbank</string>
    <string name="cat1_lec12">Mehr zu n-m-Beziehungen</string>

    <string name="cat2_lec1">Erste Anfrage mit dem SELECT-Befehl</string>
    <string name="cat2_lec2">Attribute im SELECT-Block</string>
    <string name="cat2_lec3">Wir gehen ans Limit mit dem LIMIT-Befehl</string>
    <string name="cat2_lec4">Der WHERE-Befehl</string>
    <string name="cat2_lec5">Es muss nicht alles gleich sein</string>
    <string name="cat2_lec6">Größer oder kleiner?</string>
    <string name="cat2_lec7">Ordnung ist das halbe Leben</string>
    <string name="cat2_lec8">Oder oder Oder?</string>
    <string name="cat2_lec9">Und und und…</string>
    <string name="cat2_lec10">Aber nicht doch</string>
    <string name="cat2_lec11">Wahr oder nicht wahr?</string>
    <string name="cat2_lec12">Mittendrin ist auch dabei</string>
    <string name="cat2_lec13">Unsicher? LIKE!</string>
    <string name="cat2_lec14">Doppelt hält (nicht) besser </string>
    <string name="cat2_lec15">Ein bisschen Mathe gefällig?</string>
    <string name="cat2_lec16">Nenn mich doch lieber... </string>

    <string name="cat3_lec1">Aggrewer? </string>
    <string name="cat3_lec2">Zählen bitte!</string>
    <string name="cat3_lec3">Klopf Klopf</string>
    <string name="cat3_lec4">Grüner leben dank der Summenfunktion</string>
    <string name="cat3_lec5">Grupeenbildung hey!</string>
    <string name="cat3_lec6">Manchmal reicht es Durchschnitt zu sein</string>
    <string name="cat3_lec7">Erfolg maximieren, Aufwand minimieren</string>
    <string name="cat3_lec8">Having</string>

    <string name="cat4_lec1">Es kommt zusammen, was zusammen gehört</string>
    <string name="cat4_lec2">Fremdschlüssel sind Key</string>
    <string name="cat4_lec3">INNERJOIN = Schnittmenge</string>
    <string name="cat4_lec4">Fehlt da etwa was?</string>
    <string name="cat4_lec5">Links-Rechts-Schwäche</string>
    <string name="cat4_lec6">Keine halben Sachen</string>
    <string name="cat4_lec7">Noch ein bisschen JOINEN</string>
    <string name="cat4_lec8">Doppelt hält besser</string>
    <string name="cat4_lec9">Darf es ein bisschen mehr sein?</string>

    <!-- cat 1 -->
    <string name="c1l1_input">
        Willkommen im Tutorial von Drag &amp; Query. \n\n
        Du lernst in diesem Tutorial die Funktionsweise von relationalen Datenbanken kennen.
        Dein bester Freund in diesem Tutorial ist Barry der Flamingo. Wenn du mal eine Frage nicht beantworten kannst,
        dann klicke auf Barry, um dir erneut den Informationstext anzusehen. \n\n
        Nun tippe unten auf "Verstanden", um zu deiner ersten Frage in diesem Tutorial zu gelangen.
    </string>
    <string name="c1l1_question"> Tippe auf die richtige Aussage und dann auf (absenden oder so?)</string>
    <string name="c1l1_answer1">Der Flamingo heißt Bert.</string>
    <string name="c1l1_answer2">Der Flamingo heißt Berry.</string>
    <string name="c1l1_answer3">Der Flamingo heißt Barry.</string>
    <string name="c1l1_good">Jetzt geht\'s los!</string>
    <string name="c1l1_bad">Tippe lieber nochmal auf den Flamingo. </string>


    <string name="c1l2_input">
        Datenbanken sichern die Vollständigkeit, Richtigkeit und Verfügbarkeit von großen Datenmengen.\n\n
        In jeder Schule müssen Kontaktdaten von Lehrkräften und Schüler*innen, Stundenpläne, Raumpläne und andere Daten gespeichert werden.\n\n
        Durch die Nutzung einer Datenbank geschieht das effizient, widerspruchsfrei und dauerhaft.
    </string>
    <string name="c1l2_question">In welchem der folgenden Bereiche lohnt sich der Einsatz einer Datenbank nicht?</string>
    <string name="c1l2_answer1">Addressbuch</string>
    <string name="c1l2_answer2">Familienkalender</string>
    <string name="c1l2_answer3">Einkaufsliste</string>
    <string name="c1l2_good">Korrekt, da eine Einkaufsliste für einen Haushalt nicht wirklich eine große Datenmenge ist,
        lohnt sich der Aufwand einer richtigen Datenbank nicht.</string>
    <string name="c1l2_bad">Das stimmt leider nicht. </string>

    <string name="c1l3_input">
        Im Grunde ist auch dein Stundenplan schon eine kleine Datenbank.
        Es wird gespeichert wann welcher Unterricht stattfindet.
        Deine Adresse passt jedoch nicht in dieses Format und hat ja auch mit deinen Unterrichtszeiten nichts zu tun.\n\n
        Daher gibt es in einer Datenbank nicht nur eine, sondern verschiedene Tabellen für verschiedene Datensätze.
    </string>
    <string name="c1l3_question">Wähle das Falsche aus:</string>
    <string name="c1l3_answer1">Eine Datenbank besteht immer aus mindestens einer Tabelle</string>
    <string name="c1l3_answer2">Eine Datenbank kann aus mehreren Tabellen bestehen</string>
    <string name="c1l3_answer3">Eine Datenbank besteht immer aus genau einer Tabelle</string>
    <string name="c1l3_good">Richtig, wie schon beschrieben kann eine Datenbank aus mehreren Tabellen bestehen.</string>
    <string name="c1l3_bad">Schade. Schau dir den Informationstext nochmal an. </string>

    <string name="c1l4_input">
        Am häufigsten werden relationale Datenbanken verwendet.\n\n
        Eine Relation bezeichnet allgemein die Beziehung zwischen etwas.
        In relationalen Datenbanken werden die Inhalte also in Beziehung zueinander gestellt.\n\n
        So ist jede Tabelle einer relationalen Datenbank selbst eine Relation.
        Jede*r Schüler*in hat eine Adresse.\n\n
        Diese werden einander in einer Tabelle eindeutig zugeordnet.
    </string>
    <string name="c1l4_question">Welche der Folgenden stehen nicht in Relation zueinander?</string>
    <string name="c1l4_answer1">Jede*r Schüler*in gehört zu einer Klasse</string>
    <string name="c1l4_answer2">Jedes Unterrichtsfach hat einen Raum</string>
    <string name="c1l4_answer3">Jeder Raum hat eine Nummer</string>
    <string name="c1l4_good">Super! Es gibt zwar Musik-oder Kunsträume, aber reine Deutsch-oder Matheräume gibt es nicht.</string>
    <string name="c1l4_bad">Hmm… Überleg noch einmal. </string>

    <string name="c1l5_input">
        Jede Tabelle hat einen Namen und besteht aus Zeilen und Spalten.\n\n
        Die Spaltennamen werden als „Attribute“ bezeichnet, in jeder Zeile steht ein zusammengehörender Datensatz, ein „Tupel“.\n\n
        So bildet jede Tabelle ein „Relationenschema“.\n\n
        Man kann Tabellen auch in der Form Tabellenname (Attribut 1, …, Attribut n) darstellen, wenn man die Einträge nicht sehen will.
    </string>
    <string name="c1l5_question">Orden den weißen Feldern die richtigen Begriffe zu.</string>
    <string name="c1l5_answer1">1 Spalte, 2 Tabelle, 3 Relation, 4 Zeile</string>
    <string name="c1l5_answer2">1 Eintrag, 2 Attribute, 3 Tabelle, 4Tupel</string>
    <string name="c1l5_answer3">1 Attribute, 2 Tabellenname, 3 Relationenschema, 4 Tupel</string>
    <string name="c1l5_good">Sehr gut! Diese Begriffe sind wichtig, um die einzelnen Bestandteile einer Datenbank klar zu benennen</string>
    <string name="c1l5_bad">Das stimmt leider nicht. Lies noch einmal den Informationstext.</string>

    <string name="c1l6_input">
        Damit man effizient auf die Datenbank zugreifen kann, müssen die einzelnen Einträge atomar sein.
        Das bedeutet, dass in jeder Zelle nur eine Information steht.\n\n
        Außerdem sollte keine Information doppelt gespeichert werden, sondern lieber mehrere Tabellen miteinander verknüpft werden.
    </string>
    <string name="c1l6_question">Welche Tabellenstruktur erfüllt die Bedingungen und enthält Name, Personalnummer, Adresse und Fächer?</string>
    <string name="c1l6_answer1">Oben</string>
    <string name="c1l6_answer2">Mitte</string>
    <string name="c1l6_answer3">Unten</string>
    <string name="c1l6_good">Richtig!! Bei den beiden falschen Tabellen waren die Informationen nicht atomar
        (Straße und Hausnummer in einer Spalte bzw. haben die Informationen über die unterrichteten Fächer gefehlt).</string>
    <string name="c1l6_bad">Hmmm… Schau dir die Tabellen nochmal genau an.</string>

    <string name="c1l7_input">
        Die Attribute legen fest, welche Einträge in eine Zelle geschrieben werden können.
        So kann als Geburtsdatum nur ein Datum gespeichert werden und kein Wort.\n\n
        Manchmal sind nicht alle Informationen eines Datensatzes bekannt.
        Daher gibt es die Möglichkeit “NULL” in die betreffende Zelle zu schreiben.
        NULL passt zu jedem Attribut.
    </string>
    <string name="c1l7_question">Welcher Eintrag ist falsch?</string>
    <string name="c1l7_answer1">tba</string>
    <string name="c1l7_answer2">tba</string>
    <string name="c1l7_answer3">tba</string>
    <string name="c1l7_good">Super: Die Raumnummer ist, wie der Name schon sagt eine Zahl.
        Hier muss der Eintrag also 104 statt "hundertvier" sein.</string>
    <string name="c1l7_bad">Das ist leider falsch. Lies nochmal den Informationstext.</string>

    <string name="c1l8_input">
        Um einen Datensatz zu identifizieren wird ihm ein eindeutiger Schlüssel zugeordnet.\n\n
        Gibt es in einer Tabelle keine eindeutigen Spalte, so kann auch auf einen künstlichen Schlüssel
        zurückgegriffen werden, der dann ein eigenes Attribut wird.
        Meistens handelt es sich um irgendeine Art von Nummer.\n\n
        In der Darstellung einer Datenbank erkennt man Schlüsselattribute daran, dass sie unterstrichen sind.
    </string>
    <string name="c1l8_question">Was eignet sich nicht als Schlüssel?</string>
    <string name="c1l8_answer1">Nachname</string>
    <string name="c1l8_answer2">Personalnummer</string>
    <string name="c1l8_answer3">Kürzel</string>
    <string name="c1l8_good">Richtig! Es kann an einer Schule sehr wohl mehrere Lehrkräfte mit dem
        Nachnamen "Maier" geben. Aber sowohl Personalnummer als auch Kürzel sind immer genau einmal pro Schule vergeben.</string>
    <string name="c1l8_bad">Das ist nicht richtig, versuche es noch einmal.</string>

    <string name="c1l9_input">
        Manchmal werden Primärschlüssel einer Tabelle als Eintrag in einer anderen Tabelle verwendet.
        Mit deren Hilfe findet man schnell zusammengehörende Informationen, wie beispielsweise die Adresse und die Fächer einer Lehrkraft.\n\n
        Manchmal ergibt es keinen Sinn, einen Schlüssel extra zu "erfinden".
        Dann werden mehrere Fremdschlüssel im Verbund als Schlüssel verwendet.\n\n
        In der Darstellung einer Datenbank sind Fremdschlüsselattribute ebenfalls unterstrichen und werden mit einem kleinen Pfeil ↑ markiert.
    </string>
    <string name="c1l9_question"> Klasse (<u>KlassenID</u>, Klassenlehrer, Klassensprecher, Klassenraum)\n\n
        Schüler (<u>SchülerID</u>, Vorname, Nachname, Straße, Hausnummer, PLZ, Ort, Geburtsdatum, KlassenID)\n\n
        Vor welches Attribut gehört der ↑, da es ein Fremdschlüssel ist?</string>
    <string name="c1l9_answer1">SchülerID</string>
    <string name="c1l9_answer2">Nachname</string>
    <string name="c1l9_answer3">KlassenID</string>
    <string name="c1l9_good">Richtig, die KlassenID ist eigentlich der Primärschlüssel der Tabelle Klasse.
        Sie ist aber auch als Fremdschlüssel in der Tabelle Schülerenthalten und erhält daher den ↑.</string>
    <string name="c1l9_bad">Das war das falsche Attribut. Lies dir die Fragestellung nochmal genau durch. </string>

    <string name="c1l10_input">
        Du hast jetzt schon viel über Relationenschemata, Tabellen und so weiter gehört. Du hast auch gelernt,
        dass einzelne Tabellen in Relation zueinanderstehen.\n\n
        Hierbei muss man beachten, wie das Mengenverhältnis einer solchen Beziehung aussieht.\n\n
          \n\n
        Beispiel1: \n\n
        <b>Ein*eSchüler*in</b> gehört genau <b>einer</b> Klasse an. <b>Eine</b> Klasse hat aber <b>mehrere</b>
        Schüler*innen. Man spricht also hier von einer <b>1:n-Beziehung</b> (n steht hierbei für beliebig viel). \n\n
        Schüler (n) — Klasse (1)\n\n
          \n\n
        Beispiel2: \n\n
        <b>Eine</b> Lehrkraft kann <b>mehrere</b> Fächer unterrichten. <b>Ein</b> Fach wird aber
        gleichzeitig auch von <b>mehreren</b> Lehrerkräften unterrichtet. \n\”
        Hier spricht man dann von einer <b>n:m-Beziehung</b> (m steht ebenfalls für eine beliebig große Zahl).
        Lehrkraft(n) — Fach(m)
    </string>
    <string name="c1l10_question"> Welche Tabellen können ebenfalls eine n:m-Beziehung zueinander haben?</string>
    <string name="c1l10_answer1">Klasse — Klassenraum</string>
    <string name="c1l10_answer2">Schule — Lehrkraft</string>
    <string name="c1l10_answer3">Lehrer — Klasse</string>
<string name="c1l10_good">Richtig! Klasse — Raum ist sogar eine 1:1-Beziehung. In einer Schule arbeiten
    mehrere Lehrkräfte, eine Lehrkraft arbeitet aber (im Normalfall) immer nur an einer Schule.</string>
    <string name="c1l10_bad">Hmm… Da stimmt etwas nicht. Probiere es nochmal! </string>

    <string name="c1l11_input">
        Um im nächsten Kapitel des Tutorials deine ersten Anfragen an die Datenbank stellen zu können,
        musst du nun erstmal die Datenbank selbst kennenlernen. \n\n
        Du kennst schon die Darstellung als Relationenschema, es gib aber auch eine andere Darstellung,
        in der einzelne Tabellen und ihre Beziehung zueinander dargestellt werden: das ER (Entity Relationship)-Diagramm. \n\n
        Hier werden auch die Kardinalitäten angezeigt. Um dir as ER-Diagramm anzeigen zu lassen,
        tippe auf das Symbol für Datenbank oben in der Mitte. Hier kannst du auswählen, ob du dir die
        Legende oder das Diagramm für die Datenbank "Schule" anzeigen lassen möchtest. \n\n
        Beantworte danach die Frage.
    </string>
    <string name="c1l11_question">Aus wie vielen Tabellen besteht die Datenbank Schule?</string>
    <string name="c1l11_answer1">6</string>
    <string name="c1l11_answer2">5</string>
    <string name="c1l11_answer3">7</string>
    <string name="c1l11_good">Super! Jedes Rechteck repräsentiert eine Tabelle und jede Beziehung
        mit eigenen Attributen ebenfalls.</string>
    <string name="c1l11_bad">Das ist nicht richtig. Schau dir auch die Legende an, um das Diagramm lesen zu können.</string>

    <string name="c1l12_input">
        Wie du gerade gesehen hast, gibt es zwischen Tabellen mit einer n:m-Beziehung eine Relation, an der wiederum Attribute angehängt sind. \n\n
        Dies ist erforderlich, da man in einem in einer relationalen Datenbank eine n:m-Beziehung nur
        mit einer extra Tabelle realisieren kann, die natürlich auch zusätzliche Attribute habe kann. \n\n
        Diese "neue" Tabelle repräsentiert die Beziehung der verknüpften Tabellen und sie enthält alle
        Primärschlüssel der anderen Tabellen als Fremdschlüssel. Diese können in Kombination den Primärschlüssel bilden.
    </string>
    <string name="c1l12_question">Sieh im ER-Diagramm nach und entscheide dann, welche Darstellung korrekt ist.</string>
    <string name="c1l12_answer1">unterrichten (LehrkraftID, Stunden, FachID)</string>
    <string name="c1l12_answer2">unterrichten(<u>↑LehrkraftID</u>, <u>↑FachID</u>)</string>
    <string name="c1l12_answer3">unterrichten(<u>↑LehrkraftID</u>, Stunden, <u>↑FachID</u>)</string>
    <string name="c1l12_good">Richtig! In einem Fall haben die Pfeile gefehlt und es gab keinen Primärschlüssel.
        Im anderen Fall hat das Attribut "Stunden" gefehlt. \n\n
        Du kennst nun die Datenbank "Schule" schon recht gut. Im 2. Kapitel des Tutorials stellst du
        nun erste Anfragen an diese Datenbank.</string>
    <string name="c1l12_bad">Diese Darstellung ist nicht korrekt. Schau nochmal im ER-Diagramm nach. </string>

    <!-- cat 2 -->
    <string name="c2l1_input">Um zu sehen was in der Datenbank gespeichert ist stellt man Anfragen.
        Damit der Computer diese verarbeiten kann nutzen wir Befehle in SQL (Structured Query Language).\n\n
        Jede SQL-Abfrage enthält die zwei Hauptbefehle <i>SELECT</i> (engl. auswählen) und <i>FROM</i>
        (engl. von, aus). Mit SELECT gibt man an, welche Spalten man ausgegeben haben möchte; mit
        FROM gibt man die Tabelle an, aus der die Spalten stammen.\n\n
        Du siehst gleich eine einfache SQL-Anfrage. Versuche sie nachzubauen und die Vorlage
        in den Müll zu schieben. Danach ziehe deine eigene Anfrage auf das grüne Dreieck am oberen
        Bildschirmrand, um sie abzuschicken.\n\n
        (<b>Tipp</b>: Der graue Block ist unser Alleskönner. Hier kannst du mit einem Tippen auf den 
        Block etwas hineinschreiben. Die wichtigsten SQL-Befehle findest du alle bereits vorformuliert
        in den unterschiedlichen Kategorien.)
    </string>
    <string name="c2l1_good">Gut</string>
    <string name="c2l1_bad">Ungut</string>

    <string name="c2l2_input">
        Das Ergebnis eben war ganz schön groß, weil * für alles steht, was in der Tabelle gespeichert
        ist. Versuche jetzt, dir nur die Spalten <b>Vorname</b> und <b>Nachname</b> anzeigen zu lassen.
    </string>
    <string name="c2l2_good">Gut</string>
    <string name="c2l2_bad">Ungut</string>

    <string name="c2l3_input">
        In dieser Schule sind ganz schön viele Schüler. Versuche mit dem <i>LIMIT</i> Befehl, der sich
        in der Kategorie <i>KEY</i> befindet, dir nur die ersten <b>10 Vornamen</b> anzeigen zu lassen.
    </string>
    <string name="c2l3_good">Gut</string>
    <string name="c2l3_bad">Ungut</string>

    <string name="c2l4_input">
        Meistens willst du nicht alle Datensätze anzeigen lassen, sondern nur solche, die eine bestimmte
        Bedingung erfüllen. Diese Bedingung kannst du mit dem <i>WHERE</i>-Befehl stellen. \n\n
        Versuche die <b>Vornamen</b> alle Schüler*innen (Tabelle <b>Schüler</b>) auszugeben, die
        als <b>Ort Mainz</b> eingetragen haben. Hänge dazu den “=”-Block aus der Kategorie “<i>LOGIK</i>”
        an den WHERE-Block, nutze dann den grauen Block. Der Vergleichstext (also “Mainz“) gehört in
        obere Anführungszeichen: ““.
    </string>
    <string name="c2l4_good">Gut</string>
    <string name="c2l4_bad">Ungut</string>

    <string name="c2l5_input">
        Du kannst dir auch alle <b>Orte</b> aus der Tabelle <b>Schüler</b> ausgeben lassen, außer Mainz,
        indem du statt des Gleichheitszeichens “≠” aus der Kategorie <i>LOGIK</i> auswählst.\n\n
        <b>Tipp</b>: Denke an die Anführungszeichen!
    </string>
    <string name="c2l5_good">Gut</string>
    <string name="c2l5_bad">Ungut</string>

    <string name="c2l6_input">
        In der Tabelle <b>Lehrkräfte</b> wird auch für fast jede Lehrkraft die ungefähre <b>Fahrzeit</b>
        zur Schule in Minuten gespeichert. Wähle in der Kategorie <i>LOGIK</i> den “&lt;”-Block, um dir
        die <b>Kürzel</b> aller Lehrkräfte anzeigen zu lassen, die weniger als 30 Minuten zur Schule brauchen.\n\n
        <b>Tipp</b>: Da die Fahrzeit kein Text sondern nur eine Zahl ist, brauchst du hier keine Anführungszeichen.
    </string>
    <string name="c2l6_good">Gut</string>
    <string name="c2l6_bad">Ungut</string>

    <string name="c2l7_input">
        Du hast dir eben aus der Tabelle <b>Lehrkraft</b> die <b>Kürzel</b> der Lehrkräfte anzeigen
        lassen, die eine <b>Fahrzeit</b> von weniger als 30 Minuten zur Schule haben.\n
        Sinnvoller wäre es jedoch, die Ausgabe direkt zu sortieren, sodass man sieht welche Lehrkraft
        <b>am schnellsten</b> da sein kann. Das erreichst du mit dem Befehl <i>ORDER BY</i>. Gib nach
        ORDER BY an, nach welchem Attribut die Liste sortiert werden soll. \n\n
        (<b>Tipp</b>: Der ORDER BY-Befehl sortiert standardmäßig aufsteigend. Wenn du absteigend
        sortieren möchtest, benutze den grauen Block, hänge ihn an das zu sortierende Attribut und
        tippe <b>DSC</b> in den grauen Block.)
    </string>
    <string name="c2l7_good">Gut</string>
    <string name="c2l7_bad">Ungut</string>

    <string name="c2l8_input">
        Alle Schüler*innen, die als <b>Ort</b> Budenheim oder Nackenheim haben, fahren mit dem Zug
        nach Mainz. Du kannst dir alle <b>SchülerID</b>s dieser Schüler*innen anzeigen lassen, indem
        du die logischen Blöcke “=” und “OR” verwendest. \n\n
        (Ein Datensatz wird angezeigt, wenn mindestens eine der beiden Bedingungen erfüllt ist.)
    </string>
    <string name="c2l8_good">Gut</string>
    <string name="c2l8_bad">Ungut</string>

    <string name="c2l9_input">
        Frau Müller hat den <b>Vornamen</b> ihres Kollegen Meier vergessen und weiß auch sein Kürzel
        nicht. Sie möchte ihm aber eine Geburtstagskarte schreiben. Sie weiß, dass er in Mainz wohnt. \n\n
        Versuche den <b>Vornamen</b> mit Hilfe des <b>Nachnamens</b> und des <b>Ortes</b> herauszufinden,
        indem du die logischen Blöcke “=” und “AND” verwendest.\n\n
        (Ein Datensatz wird angezeigt, wenn beide Bedingungen erfüllt sind.)
    </string>
    <string name="c2l9_good">Gut</string>
    <string name="c2l9_bad">Ungut</string>

    <string name="c2l10_input">
        Die Schulleitung möchte wissen, welche Schüler*innen nicht in Mainz wohnen. Anstatt alle anderen
        Wohnorte abzufragen kann man auch den <i>NOT</i> Befehl vor die Bedingung stellen. Dann werden
        die Datensätze ausgegeben, die die Bedingung nicht erfüllen. \n\n
        Gib die <b>SchülerID</b>, sowie <b>Vorname, Nachname</b> und <b>Ort</b> aller Schüler*innen
        aus, die nicht in Mainz wohnen.\n\n
        <b>Tipp</b>: Denke auch hier an die Anführungszeichen ““
    </string>
    <string name="c2l10_good">Gut</string>
    <string name="c2l10_bad">Ungut</string>

    <string name="c2l11_input">
        In der Tabelle <b>Raum</b> ist ein Attribut <b>Beamer</b>, dessen Attributwert 1 (also <b>wahr</b>
        = im Raum ist ein Beamer) oder 0 (also <b>falsch</b> = im Raum ist kein Beamer) sein kann. \n\n
        Verwende nach dem <i>WHERE</i>-Befehl den “=”-Block aus der Kategorie <i>LOGIK</i>, um dir
        die <b>Raumnummer</b> jedes Raums, in dem ein Beamer ist ausgeben zu lassen.
    </string>
    <string name="c2l11_good">Gut</string>
    <string name="c2l11_bad">Ungut</string>

    <string name="c2l12_input">
        Für die Lehrkräfte aus den Ortschaften süd-östlich von Mainz würde sich eine Fahrgemeinschaft
        lohnen. Du kannst viele OR Verknüpfungen mit dem logischen Baustein <i>IN</i> vermeiden. \n\n
        Wählst du nach dem WHERE-Befehl IN aus, so kannst du auflisten, zu was dein gesuchter Wert
        gleich sein darf. \n\n
        Versuche so alle <b>Nachnamen und Orte</b> der Lehrkräfte in der Tabelle <b>Lehrkraft</b> aufzulisten,
        deren <b>Ort “Mommenheim“, “Lörzweiler“, “Harxheim“</b> oder <b>“Gau-Bischofsheim“</b> ist.
    </string>
    <string name="c2l12_good">Gut</string>
    <string name="c2l12_bad">Ungut</string>

    <string name="c2l13_input">
        Manchmal weiß man nicht genau, wie ein Eintrag in der Datenbank geschrieben wird, oder wie
        eine ID lautet. Kennt man nur einige Teile, so kann man im Baustein, der auf den
        <i>LIKE</i>-Baustein folgt, einzelne Zeichen durch _ und beliebig viele Zeichen durch % ersetzen.
        Setze den folgenden Baustein zusätzlich in Anführungszeichen.\n\n
        <b>Beispiel</b>: Die Anfrage: SELECT Vorname FROM Schüler WHERE Vorname LIKE “A%“ liefert alle
        Vornamen, die mit A anfangen.\n\n
        Die Anfrage: SELECT Nachname FROM Schüler WHERE PLZ LIKE “_5555“ liefert alle Nachnamen von
        Schüler*innen, die eine PLZ haben, bei der die 1. Stelle egal ist und die dann auf „5555“ endet.\n\n
        Suche jetzt alle <b>IDs</b> von Schüler*innen, die <b>6</b> an der <b>zweiten Stelle</b> und
        <b>0</b> an der <b>letzten Stelle</b> haben.
    </string>
    <string name="c2l13_good">Gut</string>
    <string name="c2l13_bad">Ungut</string>

    <string name="c2l14_input">
        Es interessiert die Schulleitung, aus welchen Ortschaften die Lehrkräfte an der Schule kommen.
        Lässt sie sich alle Lehrkräfte mit Wohnort anzeigen, doppeln sich aber viele Orte. \n\n
        Um das zu verhindern gibt es den Befehl <i>DISTINCT</i>. Wird <i>SELECT DISTINCT</i> verwendet,
        wird jeder Attributwert nur höchstens ein mal angezeigt.\n\n
        Lasse jetzt die <b>Wohnorte</b> der Lehrkräfte anzeigen.
    </string>
    <string name="c2l14_good">Gut</string>
    <string name="c2l14_bad">Ungut</string>

    <string name="c2l15_input">
        Wir haben in unserer Tabelle <b>Lehrkraft</b> leider nur die durchschnittliche Anfahrtszeit
        pro Lehrkraft. Wir brauchen nun für die Pendlerpauschale auch die ungefähre Anzahl der Kilometer,
        die jede Lehrkraft zurücklegt. Dafür gehen wir davon aus, dass die Lehrkräfte mit einer
        durchschnittlichen Geschwindigkeit von 50 km/h fahren.\n\n
        Benutze die Grundrechenarten (+,-,*,/) um im Attribut-Block mit Hilfe der <b>Fahrtzeit</b>
        die <b>Kilometeranzahl</b> auszurechnen. Gib zusätzlich das <b>Kürzel</b> der Lehrkraft aus. \n\n
        (<b>Hinweis</b>: Die Fahrtzeit ist in Minuten gegeben!)
    </string>
    <string name="c2l15_good">Gut</string>
    <string name="c2l15_bad">Ungut</string>

    <string name="c2l16_input">
        Wie du gerade bemerkt hast, ist der Spaltenname deiner Ergebnistabelle ziemlich unschön.\n\n
        Du kannst Berechnungen oder Attribute, die du mit dem SELECT-BEFEHL auswählst, umbenennen,
        indem du den <i>AS</i>-Befehl benutzt und danach den neuen Namen angibst, der später in deiner
        Ergebnistabelle angezeigt werden soll.\n\n
        Führe die Berechnung für die Kilometeranzahl nochmal aus, benenne das Ergebnis jedoch um in
        “<b>Streck</b>e”.\n
        Gib zusätzlich das <b>Kürzel</b> an und <b>sortiere</b> deine Tabelle <b>aufsteigend</b> nach <b>Strecke</b>.
    </string>
    <string name="c2l16_good">Gut</string>
    <string name="c2l16_bad">Ungut</string>

    <!-- cat 3 -->

    <string name="c3l1_input">
        Mit Aggregatfunktionen können Daten numerisch ausgewertet werden. Jede Aggregatfunktion wird
        auf ein Attribut einer Tabelle angewendet und liefert als Ergebnis einen Zahlenwert zurück. \n\n
        Die Blöcke für die Aggregatfunktionen findest du unter „AGG“.
    </string>
    <string name="c3l1_question">Welche Aussagen über Aggregatfunktionen stimmt nicht?</string>
    <string name="c3l1_answer1">Aggregatfunktionen liefern immer einen Zahlwert.</string>
    <string name="c3l1_answer2">Aggregatfunktionen können nur auf Zahlwerte angewendet werden.</string>
    <string name="c3l1_answer3">Aggregatfunktionen dienen zur Datenauswertung.</string>
    <string name="c3l1_good">Stimmt. Aggregatfunktionen haben zwar als Ergebnis immer einen Zahlenwert,
        können aber auf beliebige Attribute angewendet werden. \n
        Beispielsweise kann man alle Nachnamen zählen.
    </string>
    <string name="c3l1_bad">Ungut</string>

    <string name="c3l2_input">
        Ein Beispiel für eine Aggregatfunktion ist <b>count</b>(Attribut). Diese zählt die Einträge
        einer Spalte, die von NULL verschieden sind und gibt die Anzahl aus.\n\n
        Mit <b>count</b>(*) zählt man alle Datensätze.\n
        Will man nur die <b>verschiedenen</b> Werte einer Spalte zählen, so benutzt man <b>count</b>
        (distinct Spaltenname).\n\n
        Aggregatfunktionen werden, wie Rechenoperatoren, nach dem SELECT Befehl verwendet.\n\n
        Versuche anhand der <b>Kürzel</b> die <b>Lehrkräfte</b> der Schule zu <b>zählen</b>.
    </string>
    <string name="c3l2_good">Gut</string>
    <string name="c3l2_bad">Ungut</string>

    <string name="c3l3_input">
        Die Funktion IFNULL(Attribut, "Alternative") prüft ob der Attributwert NULL ist und ersetzt
        ihn für den Ausdruck durch die (in Anführungszeichen gesetzte) Alternative.\n\n
        Besonders bei der Verwendung von Aggregatfunktionen kann dies nützlich sein, da mit NULL zum
        Beispiel nicht gerechnet werden kann.\n\n
        Lasse dir die IDs und Fahrtzeiten aller Lehrkräfte ausgeben, die weniger als 10 Minuten
        Fahrtzeit haben. Ersetze unbekannte Fahrtzeiten (NULL) durch -1.
    </string>
    <string name="c3l3_good">Gut</string>
    <string name="c3l3_bad">Ungut</string>

    <string name="c3l4_input">
        Um die Lehrkräfte dazu zu bringen mehr Fahrgemeinschaften zu bilden, will die Schulleitung
        die gesamt Fahrtzeit aller Lehrkräfte pro Tag wissen.\n\n
        Dazu muss die einfache <b>Fahrzeit</b> für jede <b>Lehrkraft</b> zunächst verdoppelt und
        außerdem mit Hilfe der <b>sum</b>() Funktion aufsummiert werden.\n\n
        Wie lange fahren die Lehrkräfte täglich Auto?
    </string>
    <string name="c3l4_good">Gut</string>
    <string name="c3l4_bad">Ungut</string>

    <string name="c3l5_input">
        Damit alle Schüler*innen in den Schulbus passen, will das Busunternehmen wissen, wie viele
        Schüler*innen in welchem Ort wohnen.\n\n
        Zunächst müssen die Schüler*innen in jedem Ort gezählt werden. Dazu musst du den GROUP BY-Befehl
        nutzen, er folgt in einer Anfrage auf den WHERE-Befehl.\n\n
        Sobald man Datensätze gruppiert hat, kann man nur noch Aussagen über die Gruppen, nicht mehr
        über einzelne Datensätze machen. Durch die Nutzung von GROUP BY können Attribute und
        Aggregatfunktionen im SELECT Befehl gemischt werden.\n\n
        Lasse dir die <b>Orte</b> und die <b>Anzahl</b> der dort wohnenden <b>Schüler*innen</b>
        (zähle am besten die IDs) ausgeben. Benenne die entsprechende Aggregatsfunktion mittels
        AS-Befehl in <b>Anzahl</b> um.
    </string>
    <string name="c3l5_good">Gut</string>
    <string name="c3l5_bad">Ungut</string>

    <string name="c3l6_input">
        Für die Schulhomepage soll die ungefähre Größe der Klassenräume herausgefunden werden.
        Dazu interessiert uns der Durchschnitt der Sitzplätze pro Raum.\n\n
        Auch hierfür gibt es eine passende Aggregatfunktion: <b>avg</b>().\n\n
        Berechne mit <b>avg</b>()die durchschnittliche Anzahl <b>Plätze</b> pro <b>Raum</b>.
    </string>
    <string name="c3l6_good">Gut</string>
    <string name="c3l6_bad">Ungut</string>

    <string name="c3l7_input">
        Um die Fahrtzeiten möglichst kurz zu halten wollen einige Lehrkräfte wissen, wer aus ihrem
        Ort die geringste Fahrtzeit hat. Die betreffenden Lehrkräfte wohnen in <b>Ingelheim</b>,
        <b>Engelstadt</b> und <b>Oppenheim</b>.\n\n
        Du kannst hier die Aggregatfunktion <b>min</b>() nutzen.\n\n
        Suche jetzt die Nachnamen der Lehrkräfte mit den <b>kürzesten Fahrtzeiten</b> und dem entsprechenden
        <b>Ort</b>.\n
        Beschränke deine Anfrage mit Hilfe des <b>WHERE</b>-Befehls auf die drei genannten Orte.\n
        Vergiss nicht deine Ausgabe mit dem <b>GROUP BY</b>-Befehl zu gruppieren.
    </string>
    <string name="c3l7_good">Gut</string>
    <string name="c3l7_bad">Ungut</string>

    <string name="c3l8_input">
        Die Schulleitung möchte wissen, welche Klassen mehr als 28 Schüler*innen haben.\n\n
        Dazu müssen die Schüler*innen jeder Klasse gezählt werden und die Klasse nur dann ausgegeben,
        wenn die Summe größer als 28 ist.\n\n
        Da sich die Bedingung auf das Ergebnis einer Aggregatfunktion bezieht, kann man keinen WHERE
        Befehl verwenden (WHERE bezieht sich immer auf einzelne Attribute).\n\n
        Verwende stattdessen den HAVING-Befehl um zu prüfen welche Klassen groß genug sind, nutze
        GROUP BY um die Schüler*innen klassenweise zu zählen und gib die betreffenden <b>KlassenID</b>s aus.
    </string>
    <string name="c3l8_good">Gut</string>
    <string name="c3l8_bad">Ungut</string>

    <!-- cat 4 -->
    <string name="c4l1_input">
        Manchmal möchtest du in einer Abfrage Informationen abfragen, die nicht nur in einer Tabelle, sondern verteilt auf mehrere Tabellen stehen.\n\n
        Du musst also zwei Tabellen verschmelzen und dann auf dieser verschmolzenen Tabelle deine Abfrage laufen lassen.\n\n
        Dieses Verfahren heißt <b>JOIN</b>.\n\n
        Dabei wird immer ein Datensatz aus der ersten Tabelle mit einem Datensatz aus der zweiten Tabelle zu einem neuen Datensatz zusammengesetzt.\n\n
        Ein <b>JOIN</b> macht nur dann Sinn, wenn die beiden Tabellen auch etwas miteinander zu tun haben.
    </string>
    <string name="c4l1_question">Sieh im ER-Diagramm nach und entscheide, welche der folgenden Möglichkeiten für einen <b>JOIN</b> sinnvoll ist:</string>
    <string name="c4l1_answer1">Raum und Lehrkraft</string>
    <string name="c4l1_answer2">Schüler und Klasse</string>
    <string name="c4l1_answer3">Fach und Raum</string>
    <string name="c4l1_good">Gut</string>
    <string name="c4l1_bad">Ungut</string>

    <string name="c4l2_input">
        Du hast in der letzten Lektion gelernt, dass ein Join über die Tabellen Schüler und Klasse sinnvoll ist.\n\n
        Um nun diese beiden Tabellen zu verbinden, siehst du im Relationenmodell nach, wo ein Fremdschlüssel zu einem der beiden Tabellen in der jeweils anderen Tabelle enthalten ist.\n\n
        Im FROM-Teil müssen beide Tabellen genannt sein.\n\n
        Im WHERE-Teil müssen die beiden Schlüssel gleichgesetzt werden.\n\n
        Beachte hierbei, dass vor dem (Fremd-)Schlüsselattribut immer der Name der Tabelle genannt werden muss.\n\n
        Es sieht also wie folgt aus:\n\n
        SELECT….\n
        FROM Tabelle1, Tabelle2\n
        WHERE Tabelle1.Primärschlüssel = Tabelle2.Fremdschlüssel\n\n
        Finde nun heraus, zu welcher Klasse alle Schüler gehören.\n\n
        Gib dabei Nachname der Schüler und Name der Klasse an.
    </string>
    <string name="c4l2_good">Gut</string>
    <string name="c4l2_bad">Ungut</string>

    <string name="c4l3_input">
        Die Schulleitung muss für die Raumplanung wissen, welche Klassen derzeit einen Klassenraum haben, der mehr als 20 Sitzplätze enthält.\n\n
        Gib aus, welche Klassen das sind (Name), wie viele Plätze die Räume haben und sortiere das Ergebnis aufsteigend nach der Anzahl der Plätze.
    </string>
    <string name="c4l3_good">Gut</string>
    <string name="c4l3_bad">Ungut</string>

    <string name="c4l4_input">
        Die Klasse mit der KlassenID 81 macht draußen Unfug.\n\n
        Der Hausmeister erwischt sie und muss dem Klassenlehrer Bescheid geben.\n\n
        An wen muss er sich wenden? (Gib den Vor- und Nachnamen des Lehrers aus)
    </string>
    <string name="c4l4_good">Gut</string>
    <string name="c4l4_bad">Ungut</string>

    <string name="c4l5_input">
        Du kannst nicht nur zwei Tabellen miteinander joinen sondern auch 3 Tabellen.\n\n
        Dafür musst du im WHERE-Block beide Tabellen anhand der Fremdschlüssel miteinander verbinden.\n\n
        Gib nun die Nachnamen der Schüler, ihren Klassennamen und die Raumnummer ihres Klassenraums an.
    </string>
    <string name="c4l5_good">Gut</string>
    <string name="c4l5_bad">Ungut</string>

    <string name="c4l6_input">
        Um zu entscheiden, wer bald die Fachleitung der einzelnen Fächer übernimmt, muss die Schulleitung herausfinden, welcher Lehrer welche Fächer mindestens 10 Stunden unterrichtet.\n\n
        Gib das Lehrerkürzel, den aktuellen Fachleiter, Fachname und die Stunden aus.\n\n
        Sortiere aufsteigend nach den Stunden.
    </string>
    <string name="c4l6_good">Gut</string>
    <string name="c4l6_bad">Ungut</string>

    <string name="c4l7_input">
        Was zweimal funktioniert, geht natürlich auch dreimal.\n\n
        Willkommen zum Triple-Join.\n\n
        Die Klasse mit dem Namen 8a möchte herausfinden, welches Fach (Fachname) bei Ihnen von welchem Lehrer (Kürzel) wieviele Stunden unterrichtet wird.
    </string>
    <string name="c4l7_good">Gut</string>
    <string name="c4l7_bad">Ungut</string>

    <string name="c4l8_input">
        Was zweimal funktioniert, geht natürlich auch dreimal.\n\n
        Willkommen zum Triple-Join.\n\n
        Die Klasse mit dem Namen 8a möchte herausfinden, welches Fach (Fachname) bei Ihnen von welchem Lehrer (Kürzel) wieviele Stunden unterrichtet wird.
    </string>
    <string name="c4l8_good">Gut</string>
    <string name="c4l8_bad">Ungut</string>

    <string name="c4l9_input">
        Was zweimal funktioniert, geht natürlich auch dreimal.\n\n
        Willkommen zum Triple-Join.\n\n
        Die Klasse mit dem Namen 8a möchte herausfinden, welches Fach (Fachname) bei Ihnen von welchem Lehrer (Kürzel) wieviele Stunden unterrichtet wird.
    </string>
    <string name="c4l9_good">Gut</string>
    <string name="c4l9_bad">Ungut</string>

    <!-- pop ups -->
    <string name="popup_accept">Ja!</string>
    <string name="popup_default_msg">Bist du dir wirklich sicher?"</string>
    <string name="popup_globalreset_msg">Willst du deinen gesamten Tutorial- und Übungsfortschritt zurücksetzen?</string>
    <string name="popup_closeapp_msg">Willst du schon gehen?</string>
    <string name="popup_changeimg_msg">In deiner Galerie nach einem neuen Profilbild schauen?</string>

    <!-- key value store -->
    <string name="userImageBool_key">userImageBool</string>
    <string name="userImage_key">userImage</string>
    <string name="userName_key">userName</string>
    <string name="userMail_key">userMail</string>

    <string name="tutScore1_key">tutScore1</string>
    <string name="tutScore1_unlocked_key">tutScore1_unlocked</string>
    <string name="tutScore2_key">tutScore2</string>
    <string name="tutScore2_unlocked_key">tutScore2_unlocked</string>
    <string name="tutScore3_key">tutScore3</string>
    <string name="tutScore3_unlocked_key">tutScore3_unlocked</string>
    <string name="tutScore4_key">tutScore4</string>
    <string name="tutScore4_unlocked_key">tutScore4_unlocked</string>

    <string name="prac_easy_key">pracEasy</string>
    <string name="prac_medium_key">pracMedium</string>
    <string name="prac_hard_key">pracHard</string>

    <!-- profile -->
    <string name="default_name">admin</string>
    <string name="default_mail">admin@dnq.de</string>
    <string name="pb_tutorial">Tutorial</string>
    <string name="pb_practise">Übungen</string>
    <string name="btn_retry">Retry!</string>
    <string name="table_msg_well_done">Gut gemacht!</string>

    <!-- db -->
    <string name="db_title_school">Schule</string>
    <string name="db_title_cafetaria">Cafeteria</string>
    <string name="db_title_legend">Legende</string>

    <!-- blocks -->
    <string name="block_cat1">Key</string>
    <string name="block_cat2">DB</string>
    <string name="block_cat3">Logik</string>
    <string name="block_cat4">Agg</string>

    <string name="block_select">Select </string>
    <string name="block_from">From </string>
    <string name="block_where">Where </string>
    <string name="block_star">* </string>

    <!-- impressum -->
    <string name="impressum">
      Diese Anwendung wurde im Rahmen der Veranstaltung „Programmierprojekt“ im Master of Education Informatik im Wintersemester 2019/20 an der Johannes-Gutenberg Universität Mainz erstellt.\n\n
      Entwicklung Back-End: Patrick Abels (pabels@students.uni-mainz.de)\n
      Entwicklung Front-End: Vera Ruß (vruss@students.uni-mainz.de)\n
      Datenbanken: Philipp Kötz (pkoetz@students.uni-mainz.de)\n
      Redaktionelle Inhalte: Vera Ruß, Philipp Kötz\n\n
      Betreuende Lehrende: Ak. Dir.,  Dr. rer. nat. Hans-Jürgen Schröder (schroeder@uni-mainz.de), Dr. Stefan Endler (endler@uni-mainz.de)\n\n      
      Die Dokumentation und der Programmcode finden Sie unter git@github.com:PatrickAbels8/DragAndQuery.git\n
        

    </string>

    <!-- toasts -->
    <string name="toast_notUnlockedYet">Noch nicht freigeschaltet!</string>
    <string name="toast_alreadyDone">Bereits erledigt!</string>
    <string name="toast_ImagePermissionDenied">Leider ist diese Funktion nicht möglich!</string>

    <!-- errors -->
    <string name="select_missing_error">Ich finde leider kein SELECT ...</string>
    <string name="sql_error">SQL Fehler</string>
    <string name="no_db_chosen_error">Bitte wähle eine Datenbank aus ...</string>

</resources>
